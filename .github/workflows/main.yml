name: 🚀 CI/CD con SonarQube y Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-analyze-deploy:
    name: 🔁 Build + Análisis + Despliegue
    runs-on: self-hosted

    steps:
      - name: 📥 Paso 1 - Clonar repositorio
        uses: actions/checkout@v4
        with:
          # SonarQube necesita el historial completo para analizar código nuevo
          fetch-depth: 0

      - name: ☕ Paso 2 - Configurar Java (usará el Maven del runner)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📊 Paso 3 - Compilar y Analizar con SonarQube
        env:
          # El token de GitHub es útil para decorar Pull Requests
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Tu token de SonarQube, que hemos guardado de forma segura
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "📦 Compilando y ejecutando análisis SonarQube..."
          mvn verify sonar:sonar \
            -Dsonar.projectKey=lpapp \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}
          echo "✅ Análisis completado."

      - name: 🐳 Paso 4 - Desplegar con Docker Compose
        run: |
          echo "🧹 Apagando contenedores anteriores si existen..."
          docker compose -f docker/docker-compose.yml down -v --remove-orphans

          echo "🚀 Iniciando nuevo despliegue..."
          docker compose -f docker/docker-compose.yml up -d --build

          echo "⏳ Esperando 15 segundos para que la aplicación arranque..."
          sleep 15

          echo "📋 Contenedores activos:"
          docker ps

          echo "📝 Logs recientes del contenedor de la aplicación:"
          # Asegúrate de que el nombre del contenedor sea el correcto
          docker logs --tail=100 product_app || echo "⚠️ No se pudo obtener logs de 'product_app'"
