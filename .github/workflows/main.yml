# Nombre del workflow
name: Build, Analyze (SonarQube) and Deploy

# Disparadores
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Variables de entorno
env:
  DOCKER_PROJECT_NAME: 'Examen_03'
  APP_CONTAINER_NAME: 'product_app'

jobs:
  build-analyze-and-deploy:
    name: Build, Analyze and Deploy Locally
    runs-on: self-hosted

    steps:
      # 1. Descargar el código
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Configurar JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ====================================================================
      # 3. NUEVO PASO: Construir y Analizar con SonarQube
      #    Ejecutamos el análisis de SonarQube como parte del build de Maven.
      #    Le pasamos la URL del servidor y el token de forma segura.
      # ====================================================================
      - name: Build and Analyze with SonarQube
        run: >
          mvn -B verify sonar:sonar
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          # El token de GitHub es útil si usas la integración con PRs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. Desplegar con Docker Compose (solo si el paso anterior fue exitoso)
      - name: Deploy with Docker Compose
        run: |
          echo "✅ Iniciando despliegue en el runner local..."
          cd docker
          echo "🧹 Limpiando despliegue anterior..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} down -v --remove-orphans
          echo "🏗️ Construyendo y levantando los servicios..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build
          echo "🔍 Verificando estado de los contenedores..."
          docker-compose -p ${{ env.DOCKER_PROJECT_NAME }} ps
          echo "⏳ Esperando 15 segundos para que la aplicación inicie..."
          sleep 15
          echo "🗒️ Mostrando los últimos logs de la aplicación:"
          docker logs --tail 500 ${{ env.APP_CONTAINER_NAME }}
          echo "🎉 ✓ Despliegue completado."
